################################################################################
# AstroJS ephaster converter script (c) 2016 by Marcel Greter
################################################################################
# Very quick and dirty perl script to get the job done.
################################################################################
use strict;
use warnings;

use JSON qw();
use File::Path;
use File::Slurp;
use Fortran::Format;

our $accuracy = 10e-6;
unless(defined $ARGV[0]) {
	warn "using default precision of 10e-6\n";
} else {
	$accuracy = $ARGV[0];
}

our $target = 'src';
if(defined $ARGV[1]) {
	$target = $ARGV[1];
	if (!-d $target && !File::Path::make_path($target)) {
		warn "could not create $target\n";
	}
}

# converted from EPHASTER.FOR
sub gen_ephaster {

	# the input arguments
	my ($body, $file) = @_;

	# open the minor planet data file
	my $rv = open(my $fh, "<", "data/$file");
	warn "creating ${target}/${body}\n";
	die 'File of minor planet does not exist' unless $rv;

	# collect coefficients
	my $coeffs = [];

	# number of different tzeros
	my $nm = $body =~m/^\d+\-bar/ ? 1 : 3;

	# read all three series
	# for different tzero
	for(my $n = 0; $n < $nm; $n += 1) {
		# do iv=1,ivar
		for(my $iv = 0; $iv < 3; $iv += 1) {

			# read (nulog,FMT='(A12)')
			# ! Reading internal name (useless)
			my $fname = new Fortran::Format("(A12)");
			my ($name) = $fname->read($fh, 1);

			# read (nulog,FMT='(F10.2,F8.0,I4)')
			# & tzero(nser),dt(nser),mx(nser)
			my $fhead = new Fortran::Format("(F10.2,F8.0,I4)");
			my ($tzero, $dt, $mx) = $fhead->read($fh, 1, 1, 1);

			# read number of coefficients
			my $fint = new Fortran::Format("(I4)");
			# read (nulog,'(I4)') imax
			my ($imax) = $fint->read($fh, 1);

			# the fortran patters to read coefficients
			my $fhcoeffs = new Fortran::Format("(10P,2F14.0)");
			my $fmcoeffs = new Fortran::Format("(10P,2F14.0,0P,F20.16)");

			# store the series
			$coeffs->[$n]->[$iv] = [
				$tzero, $dt, $mx,
				my $hcoeffs = [],
				my $mcoeffss = []
			];

			# do i=1,imax
			for (my $i = 0; $i < $imax; $i += 1) {
				# read (nulog,FMT='(10P,2F14.0)')
				# & sec(i+is-1,iv,nser),sec(i+is,iv,nser)
				# read main coeffs and store them in the head series
				my ($c1, $c2) = $fhcoeffs->read($fh, 1, 1);
				next if ($c1**2 + $c2**2 < $accuracy**2); # truncate series
				push @{$hcoeffs}, [ $c1, $c2 ];
			}

			# do m=0,mx(nser)
			for (my $m = 0; $m <= $mx; $m += 1) {
				# create another nesting level
				# ToDo: could also store length
				# and then use a flat array?
				push @{$mcoeffss}, my $mcoeffs = [];
				# read (nulog,FMT='(I4)') nw
				my ($nw) = $fint->read($fh, 1);
				# ip=mod(m,2)
				my $ip = $m % 2;
				# do i=1,nw
				for (my $i = 0; $i < $nw; $i ++) {
					# read main coeffs and store them in the main series
					my ($c1, $c2, $c3) = $fmcoeffs->read($fh, 1, 1, 1);
					next if ($c1**2 + $c2**2 < $accuracy**2); # truncate series
					push @{$mcoeffs}, [ $ip ? $c2 : $c1, $ip ? $c1 : $c2, $c3 ];
				}
			}
		}
	}

	# create json exporter
	my $json = new JSON;
	# sort keys in objects
	$json->canonical(1);

	my $js = $json->encode($coeffs);

	# extract the id from the name
	my $id = substr(lc $body, 5, 3);
	# generate javascript code
	# create the javascript code
	my $code =
"// generated by ephaster.pl

// create function for body
ephaster.${id} = function (jd) {
	return ephaster(ephaster.${id}.coeffs, jd);
};

// assign the coefficients
ephaster.${id}.coeffs = $js;
";

	# write the file with coefficients
	write_file "${target}/${body}.js", $code;

}

# generate main series
gen_ephaster("0000-emb", "EMB.XYZ");
gen_ephaster("0000-barycenter", "BARYCENT.XYZ");

# generate asteroid series
gen_ephaster("0001-ceres", "0001.XYZ");
gen_ephaster("0002-pallas", "0002.XYZ");
gen_ephaster("0003-juno", "0003.XYZ");
gen_ephaster("0004-vesta", "0004.XYZ");
gen_ephaster("0005-astrae", "0005.XYZ");
gen_ephaster("0006-hebe", "0006.XYZ");
gen_ephaster("0007-iris", "0007.XYZ");
gen_ephaster("0324-bamberga", "0324.XYZ");

############################################################
# Create the unit test file
############################################################
my %qidmap = (2 => 0, 4 => 1, 6 => 2, 8 => 3, 12 => 4);
if ($target =~ m/^src[\/\\](\d+)-(\w+)/) {
	my ($id, $qid, $qname) = ($1, $qidmap{$1+0}, $2);
	my $config = { binmode => ':raw' };
	my $tmpl = read_file( 'conf/unit-test.thtml', $config);
	die "could not read unit test template" unless $tmpl;
	my $path = sprintf('../../test/ephaster/%02d-%s.html', $id, $qname);
	$tmpl =~ s/%%id%%/$qid/g; write_file($path, $config, $tmpl);
}
