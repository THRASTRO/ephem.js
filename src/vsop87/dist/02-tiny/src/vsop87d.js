/* autogenerated by webmerge (join context) */
;
var vsop87d = {};
//***********************************************************
// (c) 2016 by Marcel Greter
// AstroJS VSOP87 utility lib
// https://github.com/mgreter/ephem.js
//***********************************************************
(function(self) {

	// generic vsop87 solver (pass coefficients and time)
	// this is basically a one to one translation from the official
	// fortran code in vsop87.f at around line 185. Only change is
	// that I took out the multiplication for the summands and apply
	// it after the sum has been calculated. IMO this should be a bit
	// faster than the original implementation, but not sure if the
	// precision will suffer from that change.
	if (typeof self.vsop87 !== "function") {
		// only define once in global scope
		// otherwise we overwrite loaded data
		self.vsop87 = function vsop87(coeffs, time)
		{
			// want 1000 JY (KJY)
			var t = time / 1000, result = {},
			    u, cu, tt = [0, 1, t, t*t];
			// reuse old multiplications
			// fortran t(x) array starts at -1!
			// therefore t(it) = tt[it+1] (js)
			tt[4] = tt[3] * t, tt[5] = tt[4] * t, tt[6] = tt[5] * t;
			// do a cheap test if coefficients are from the main vsop87
			// theories. All other [a-e] only need 3 to calculate the
			// full 6 elements (velocity is calculated from position).
			var main = 'a' in coeffs;
			// calculate poisson series
			for (var v in coeffs) {
				// init result holders
				result[v] = 0;
				if (!main) result['v'+v] = 0;
				// loop all coefficients for all powers (t^0, t^1, t^2, etc.)
				for (var it = 0, sum = 0, dsum = 0; it < coeffs[v].length; it += 1) {
					var pow_sum = 0, dpow_sum = 0, coeff = coeffs[v][it];
					for (var i = 0, cl = coeff.length; i < cl; i += 3) {
						// assign coefficients as in fortran code
						// `read (lu,1002,err=500) a,b,c` (line 187)
						var a = coeff[i+0], b = coeff[i+1], c = coeff[i+2];
						// `u=b+c*t(1)` and `cu=dcos(u)`
						u = b + c * t, cu = Math.cos(u);
						// `r(ic)=r(ic)+a*cu*t(it)`
						pow_sum += a * cu * tt[it+1];
						// condition for `if (iv.eq.0) goto 200`
						// calculation for `t(it)*a*c*su` (line 194)
						// note to myself: tt[it]*it != tt[it+1]
						if (!main) dpow_sum += tt[it]*it*a*cu - tt[it+1]*a*c*Math.sin(u);
					}
					// this is the step for r(ic)=r(ic)+(...) (line 191)
					result[v] += pow_sum; /*t(it)*/;
					if (!main) result['v'+v] += dpow_sum / 365250;
				}
			}
			// normalize angles
			if ('L' in result) {
				result.L = result.L % (Math.PI * 2);
				if (result.L < 0) result.L += (Math.PI * 2);
			}
			if ('l' in result) {
				result.l = result.l % (Math.PI * 2);
				if (result.l < 0) result.l += (Math.PI * 2);
			}
			if ('b' in result) {
				result.n = result.n % (Math.PI * 2);
				if (result.n < 0) result.n += (Math.PI * 2);
			}
			// return result
			return result;
		}

	}

	/*
	// position = heliocentric
	function vsop2fk5(position, JD)
	{
		var LL, cos_LL, sin_LL, T, delta_L, delta_B, B;

		// get julian centuries from 2000
		T = (JD - 2451545.0) / 36525.0;

		LL = position.L + (- 1.397 * DEG2RAD - 0.00031 * DEG2RAD * T) * T;
		// LL = ln_deg_to_rad(LL);
		cos_LL = Math.cos(LL);
		sin_LL = Math.sin(LL);
		// B = ln_deg_to_rad(position.B);

		delta_L = (-0.09033 / 3600.0) + (0.03916 / 3600.0) *
				(cos_LL + sin_LL) * Math.tan(B);
		delta_B = (0.03916 / 3600.0) * (cos_LL - sin_LL);

		return {
			l: L + delta_L,
			b: B + delta_B
		};
	}
	*/

})(self);;
(function(vsop87d) {;

function vsop87d_mer(jy) { return vsop87(vsop87d_mer.coeffs, jy); }
vsop87d_mer.coeffs = {
	l: [[4.40250710144,0,0,0.40989414976,1.48302034194,26087.9031415742,0.05046294199,4.4778548954,52175.8062831484],[26088.1470622275,0,0,0.01126007832,6.21703970996,26087.9031415742]],
	b: [[0.11737528962,1.98357498767,26087.9031415742,0.02388076996,5.03738959685,52175.8062831484,0.01222839532,3.14159265359,0]],
	r: [[0.39528271652,0,0,0.07834131817,6.19233722599,26087.9031415742]]
}; // assign to function
vsop87d.mer = vsop87d_mer; // export function
;

function vsop87d_ven(jy) { return vsop87(vsop87d_ven.coeffs, jy); }
vsop87d_ven.coeffs = {
	l: [[3.17614666774,0,0,0.01353968419,5.59313319619,10213.285546211],[10213.529430529,0,0]],
	b: [[0.05923638472,0.26702775813,10213.285546211]],
	r: [[0.72334820905,0,0]]
}; // assign to function
vsop87d.ven = vsop87d_ven; // export function
;

function vsop87d_ear(jy) { return vsop87(vsop87d_ear.coeffs, jy); }
vsop87d_ear.coeffs = {
	l: [[1.75347045673,0,0,0.03341656456,4.66925680417,6283.0758499914],[6283.31966747491,0,0]],
	b: [[2.7962e-006,3.19870156017,84334.6615813083]],
	r: [[1.00013988799,0,0,0.01670699626,3.09846350771,6283.0758499914]]
}; // assign to function
vsop87d.ear = vsop87d_ear; // export function
;

function vsop87d_mar(jy) { return vsop87(vsop87d_mar.coeffs, jy); }
vsop87d_mar.coeffs = {
	l: [[6.20347711583,0,0,0.186563681,5.05037100303,3340.6124266998,0.01108216792,5.40099836958,6681.2248533996],[3340.85627474342,0,0,0.01458227051,3.60426053609,3340.6124266998]],
	b: [[0.03197134986,3.76832042432,3340.6124266998]],
	r: [[1.53033488276,0,0,0.14184953153,3.47971283519,3340.6124266998],[0.0110743334,2.0325052495,3340.6124266998]]
}; // assign to function
vsop87d.mar = vsop87d_mar; // export function
;

function vsop87d_jup(jy) { return vsop87(vsop87d_jup.coeffs, jy); }
vsop87d_jup.coeffs = {
	l: [[0.59954691495,0,0,0.09695898711,5.06191793105,529.6909650946],[529.93480757497,0,0]],
	b: [[0.02268615703,3.55852606718,529.6909650946]],
	r: [[5.20887429471,0,0,0.2520932702,3.49108640015,529.6909650946],[0.01271801596,2.64937511122,529.6909650946]]
}; // assign to function
vsop87d.jup = vsop87d_jup; // export function
;

function vsop87d_sat(jy) { return vsop87(vsop87d_sat.coeffs, jy); }
vsop87d_sat.coeffs = {
	l: [[0.87401354029,0,0,0.1110765978,3.96205090194,213.299095438,0.01414150958,4.58581515873,7.1135470008],[213.54295595986,0,0,0.01296855005,1.82820544701,213.299095438]],
	b: [[0.0433067804,3.60284428399,213.299095438]],
	r: [[9.55758135801,0,0,0.52921382465,2.39226219733,213.299095438,0.01873679934,5.23549605091,206.1855484372,0.01464663959,1.64763045468,426.598190876],[0.06182981282,0.25843515034,213.299095438]]
}; // assign to function
vsop87d.sat = vsop87d_sat; // export function
;

function vsop87d_ura(jy) { return vsop87(vsop87d_ura.coeffs, jy); }
vsop87d_ura.coeffs = {
	l: [[5.48129294299,0,0,0.09260408252,0.8910642153,74.7815985673,0.01504247826,3.62719262195,1.4844727083],[75.02543121646,0,0]],
	b: [[0.01346277639,2.61877810545,74.7815985673]],
	r: [[19.21264847881,0,0,0.88784984055,5.60377526994,74.7815985673,0.03440835545,0.32836098991,73.297125859,0.02055653495,1.78295170028,149.5631971346],[0.0147989637,3.67205705317,74.7815985673]]
}; // assign to function
vsop87d.ura = vsop87d_ura; // export function
;

function vsop87d_nep(jy) { return vsop87(vsop87d_nep.coeffs, jy); }
vsop87d_nep.coeffs = {
	l: [[5.31188633047,0,0,0.01798475509,2.9010127305,38.1330356378,0.01019727662,0.4858092366,1.4844727083],[38.37687716731,0,0]],
	b: [[0.03088622933,1.44104372626,38.1330356378]],
	r: [[30.07013206102,0,0,0.2706225949,1.3299945893,38.1330356378,0.01691764281,3.25186138896,36.6485629295]]
}; // assign to function
vsop87d.nep = vsop87d_nep; // export function
;
})(vsop87d)
/* crc: 46FF04E33F2C83197F271346081D0ADC */
