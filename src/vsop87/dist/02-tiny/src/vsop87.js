/* autogenerated by webmerge (join context) */
;
var vsop87 = {};
//***********************************************************
// (c) 2016 by Marcel Greter
// AstroJS VSOP87 utility lib
// https://github.com/mgreter/ephem.js
//***********************************************************
(function(exports) {

	var mat3; // allocate when needed

	// update vsop elements in elems at offset and return elems array
	function vsop(solver, theory, jy2k, elems, addGM, addEpoch, off)
	{
		off = off || 0;
		jy2k = jy2k || 0;
		elems = elems || [];
		// call main theory to fill elements
		solver(theory, jy2k, elems, addGM, addEpoch, off);
		// check if theory gives mean motion
		if (theory.givesMeanMotion) {
			// assume that mean motion is in days, convert to years
			var fact = elems[off+0] * theory.givesMeanMotion;
			// convert mean motion to semi-major axis via gravitational parameter
			elems[off+0] = Math.cbrt(theory.GM / fact / fact);
		}
		// a bit expensive to get as we need to
		// convert into cartesian to apply rotation
		// we then reconstruct the kepler elements
		// ToDo: can this be implemented directly?
		// Note: doesn't seem to be too obvious!?
		if (toVSOP = theory.toVSOP) {
			// translate via cartesian coords
			// there might be an easier way?
			// do we really need to convert?
			var orbit = new Orbit({
				a: elems[off+0],
				L: elems[off+1],
				k: elems[off+2],
				h: elems[off+3],
				q: elems[off+4],
				p: elems[off+5],
				GM: theory.GM,
				epoch: jy2k
			});
			// get state vectors
			var state = orbit.state(jy2k);
			// check for dynamic rotations
			if (typeof toVSOP == "function") {
				// create only once needed
				mat3 = mat3 || new THREE.Matrix3();
				// get dynamic matrix
				toVSOP(jy2k, mat3);
				toVSOP = mat3;
			}
			// rotate cartesian vectors
			state.r.applyMatrix3(toVSOP);
			state.v.applyMatrix3(toVSOP);
			// create via rotated state
			orbit = new Orbit(state);
			// update state elements
			elems[off++] = orbit._a;
			elems[off++] = orbit.L();
			elems[off++] = orbit.k();
			elems[off++] = orbit.h();
			elems[off++] = orbit.q();
			elems[off++] = orbit.p();
		}
		// return state object
		return elems;
	}
	// EO vsop

	// Return an orbital object suitable to create new Orbit
	function orbital(solver, theory, jy2k, elems, addGM, addEpoch, off)
	{
		off = off || 0;
		jy2k = jy2k || 0;
		elems = elems || [];
		// call main theory to fill elements
		vsop(solver, theory, jy2k, elems, addGM, addEpoch, off);
		// return orbital object
		return {
			a: elems[off++],
			L: elems[off++],
			k: elems[off++],
			h: elems[off++],
			q: elems[off++],
			p: elems[off++],
			GM: theory.GM,
			epoch: jy2k
		};
	}
	// EO orbital

	// update state elements in elems at offset and return array
	function state(solver, theory, jy2k, elems, addGM, addEpoch, off)
	{
		off = off || 0;
		jy2k = jy2k || 0;
		elems = elems || [];
		// call main theory to fill elements
		vsop(solver, theory, jy2k, elems, addGM, addEpoch, off);
		// create orbit object from vsop array
		var orbit = new Orbit({
			a: elems[off+0],
			L: elems[off+1],
			k: elems[off+2],
			h: elems[off+3],
			q: elems[off+4],
			p: elems[off+5],
			GM: theory.GM,
			epoch: jy2k
		});
		// calculate state vector
		var state = orbit.state(jy2k);
		// update state elements
		elems[off++] = state.r.x;
		elems[off++] = state.r.y;
		elems[off++] = state.r.z;
		elems[off++] = state.v.x;
		elems[off++] = state.v.y;
		elems[off++] = state.v.z;
		// return state object
		return elems;
	}
	// EO state

	// update state elements in elems at offset and return state object
	function position(solver, theory, jy2k, elems, addGM, addEpoch, off)
	{
		off = off || 0;
		jy2k = jy2k || 0;
		elems = elems || [];
		// call main theory to fill elements
		state(solver, theory, jy2k, elems, addGM, addEpoch, off);
		// return state object
		return {
			x: elems[off++],
			y: elems[off++],
			z: elems[off++],
			vx: elems[off++],
			vy: elems[off++],
			vz: elems[off++],
			GM: theory.GM,
			epoch: jy2k
		};
	}
	// EO position

	// Export the main exporter function
	// Call this function for every theory
	exports.VSOP = function VSOP(solver, name, GM, coeffs, toVSOP, givesMeanMotion)
	{
		var theory = {};
		// update raw elements in elems at offset and return elems array
		theory.raw = function vsop_raw(jy2k, elems, addGM, addEpoch, off) {
			return solver(theory, jy2k, elems, addGM, addEpoch, off);
		}
		// update vsop elements in elems at offset and return elems array
		theory.vsop = function vsop_theory(jy2k, elems, addGM, addEpoch, off) {
			return vsop(solver, theory, jy2k, elems, addGM, addEpoch, off);
		}
		// update state elements in elems at offset and return elems array
		theory.state = function vsop_state(jy2k, elems, addGM, addEpoch, off) {
			return state(solver, theory, jy2k, elems, addGM, addEpoch, off);
		}
		// update state elements in elems at offset and return state object
		theory.position = function vsop_position(jy2k, elems, addGM, addEpoch, off) {
			return position(solver, theory, jy2k, elems, addGM, addEpoch, off);
		}
		// update vsop elements in elems at offset and return orbital object
		theory.orbital = function vsop_orbital(jy2k, elems, addGM, addEpoch, off) {
			return orbital(solver, theory, jy2k, elems, addGM, addEpoch, off);
		}
		// update vsop elements in elems at offset and return orbit object
		theory.orbit = function vsop_orbit(jy2k, elems, addGM, addEpoch, off) {
			return new Orbit(orbital(solver, theory, jy2k, elems, addGM, addEpoch, off));
		}
		// Attach static properties
		theory.givesMeanMotion = givesMeanMotion;
		theory.toVSOP = toVSOP;
		theory.coeffs = coeffs;
		theory.GM = GM;
		// short name only
		theory.name = name;
		// Return theory
		return theory;
	}
	// EO exports.VSOP

})(this);;
//***********************************************************
// (c) 2016 by Marcel Greter
// AstroJS VSOP87 utility lib
// https://github.com/mgreter/ephem.js
//***********************************************************
(function(exports) {

	// generic vsop87 solver (pass coefficients and time)
	// this is basically a one to one translation from the official
	// fortran code in vsop87.f at around line 185. Only change is
	// that I took out the multiplication for the summands and apply
	// it after the sum has been calculated. IMO this should be a bit
	// faster than the original implementation, but not sure if the
	// precision will suffer from that change.
	function vsop87_theory(theory, jy2k, elems, addGM, addEpoch, off)
	{
		off = off || 0;
		jy2k = jy2k || 0;
		elems = elems || [];
		// get the coefficients
		var coeffs = theory.coeffs;
		// want in thousand years
		var t = jy2k / 1000, orb = {},
			u, cu, tt = [0, 1, t, t*t];
		// reuse old multiplications
		// fortran t(x) array starts at -1!
		// therefore t(it) = tt[it+1] (js)
		tt[4] = tt[3] * t, tt[5] = tt[4] * t, tt[6] = tt[5] * t;
		// do a cheap test if coefficients are from the main vsop87
		// theories. All other [a-e] only need 3 to calculate the
		// full 6 elements (velocity is calculated from position).
		var main = 'a' in coeffs;
		// calculate poisson series
		for (var v in coeffs) {
			// init result holders
			orb[v] = 0;
			if (!main) orb['v'+v] = 0;
			// loop all coefficients for all powers (t^0, t^1, t^2, etc.)
			for (var it = 0; it < coeffs[v].length; it += 1) {
				var pow_sum = 0, dpow_sum = 0, coeff = coeffs[v][it];
				for (var i = 0, cl = coeff.length; i < cl; i += 3) {
					// assign coefficients as in fortran code
					// `read (lu,1002,err=500) a,b,c` (line 187)
					var a = coeff[i+0], b = coeff[i+1], c = coeff[i+2];
					// `u=b+c*t(1)` and `cu=dcos(u)`
					u = b + c * t, cu = Math.cos(u);
					// `r(ic)=r(ic)+a*cu*t(it)`
					pow_sum += a * cu * tt[it+1];
					// condition for `if (iv.eq.0) goto 200`
					// calculation for `t(it)*a*c*su` (line 194)
					// note to myself: tt[it]*it != tt[it+1]
					if (!main) dpow_sum += tt[it]*it*a*cu - tt[it+1]*a*c*Math.sin(u);
				}
				// this is the step for r(ic)=r(ic)+(...) (line 191)
				orb[v] += pow_sum; /*t(it)*/;
				if (!main) orb['v'+v] += dpow_sum / 365250;
			}
		}
		// normalize angles
		if ('L' in orb) {
			orb.L = orb.L % (Math.PI * 2);
			if (orb.L < 0) orb.L += (Math.PI * 2);
		}
		if ('l' in orb) {
			orb.l = orb.l % (Math.PI * 2);
			if (orb.l < 0) orb.l += (Math.PI * 2);
		}
		if ('b' in orb) {
			orb.n = orb.n % (Math.PI * 2);
			if (orb.n < 0) orb.n += (Math.PI * 2);
		}
		// set orbital epoch
		orb.epoch = jy2k;
		// return orbital
		return orb;
	}
	// EO vsop87_theory

	// Export the main export function
	// Call this function for each theory
	exports.VSOP87 = function(name, GM, coeffs)
	{
		// export generic VSOP theory with solver attached
		return exports.VSOP(vsop87_theory, name, GM, coeffs);
	}
	// EO exports.VSOP87

})(this);;
(function(vsop87) {;
// generated by vsop87.pl
vsop87.mer = VSOP87('mer', 39.4769329861321, {
	a: [[0.38709830982,0,0]],
	L: [[4.4026088424,0,0],[26087.9031415742,0,0]],
	k: [[0.0446605976,0,0]],
	h: [[0.20072331368,0,0]],
	q: [[0.04061563384,0,0]],
	p: [[0.04563550461,0,0]]
});
;
// generated by vsop87.pl
vsop87.ven = VSOP87('ven', 39.4770230655563, {
	a: [[0.72332981996,0,0]],
	L: [[3.17614669689,0,0],[10213.285546211,0,0]],
	k: [[0.00449282133,3.14159265359,0]],
	h: [[0.00506684726,0,0]],
	q: [[0.00682410142,0,0]],
	p: [[0.02882285775,0,0]]
});
;
// generated by vsop87.pl
vsop87.emb = VSOP87('emb', 39.477046459361, {
	a: [[1.00000101778,0,0]],
	L: [[1.75347045953,0,0],[6283.0758499914,0,0]],
	k: [[0.0037408165,3.14159265359,0]],
	h: [[0.01628447663,0,0]],
	q: [[4.699e-007,1.03836320801,775.522611324]],
	p: [[4.8408e-007,5.76054381234,775.522611324]]
});
;
// generated by vsop87.pl
vsop87.mar = VSOP87('mar', 39.4769391722243, {
	a: [[1.52367934191,0,0]],
	L: [[6.20347611291,0,0],[3340.61242669981,0,0]],
	k: [[0.08536560252,0,0]],
	h: [[0.03789973236,3.14159265359,0]],
	q: [[0.01047042574,0,0]],
	p: [[0.01228449307,0,0]]
});
;
// generated by vsop87.pl
vsop87.jup = VSOP87('jup', 39.5146186826235, {
	a: [[5.20260319132,0,0]],
	L: [[0.59954649739,0,0],[529.6909650946,0,0]],
	k: [[0.04698572124,0,0]],
	h: [[0.01200385748,0,0]],
	q: [[0.00206561098,3.14159265359,0]],
	p: [[0.01118377157,0,0]]
});
;
// generated by vsop87.pl
vsop87.sat = VSOP87('sat', 39.4882123322459, {
	a: [[9.55490959574,0,0,0.03363448736,6.0097367346,316.3918696566]],
	L: [[0.8740167565,0,0,0.01411655077,4.58553469006,7.1135470008],[213.299095438,0,0]],
	k: [[0.00296003595,3.14159265359,0]],
	h: [[0.05542964254,0,0]],
	q: [[0.00871747436,3.14159265359,0]],
	p: [[0.01989147301,0,0]]
});
;
// generated by vsop87.pl
vsop87.ura = VSOP87('ura', 39.4789600424755, {
	a: [[19.21844606178,0,0,0.0803047624,1.40140954803,454.9093665273,0.02068375131,1.67626096637,138.5174968707]],
	L: [[5.48129387159,0,0,0.01503941337,3.62721239702,1.4844727083],[74.7815985673,0,0]],
	k: [[0.04595132376,3.14159265359,0]],
	h: [[0.00563791307,0,0]],
	q: [[0.00185915075,0,0]],
	p: [[0.00648617008,0,0]]
});
;
// generated by vsop87.pl
vsop87.nep = VSOP87('nep', 39.4786500913706, {
	a: [[30.11038686942,0,0,0.14818172119,1.57105922541,491.5579294568,0.03597274341,1.84552690821,175.1660598002]],
	L: [[5.31188628676,0,0,0.01017628072,0.48586478491,1.4844727083],[38.1330356378,0,0]],
	k: [[0.00599977571,0,0]],
	h: [[0.00669242413,0,0]],
	q: [[0.01029147819,3.14159265359,0]],
	p: [[0.01151683985,0,0]]
});
;
})(vsop87)
/* crc: D55CCA54B0463E05D26220111A0B5BBE */
