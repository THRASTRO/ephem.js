/* autogenerated by webmerge (join context) */
;
var top2013 = {};
(function(top2013) {;
//***********************************************************
// (c) 2016-2021 by Marcel Greter
// AstroJS VSOP87 utility lib
// https://github.com/mgreter/ephem.js
//***********************************************************
(function(exports) {

	var mat3; // allocate when needed

	// update vsop elements in elems at offset and return elems array
	function vsop(solver, theory, jy2k, elems, addGM, addEpoch, off)
	{
		off = off || 0;
		jy2k = jy2k || 0;
		elems = elems || [];
		// call main theory to fill elements
		solver(theory, jy2k, elems, addGM, addEpoch, off);
		// check if theory gives mean motion
		if (theory.givesMeanMotion) {
			// assume that mean motion is in days, convert to years
			var fact = elems[off+0] * theory.givesMeanMotion;
			// convert mean motion to semi-major axis via gravitational parameter
			elems[off+0] = Math.cbrt(theory.GM / fact / fact);
		}
		// a bit expensive to get as we need to
		// convert into cartesian to apply rotation
		// we then reconstruct the kepler elements
		// ToDo: can this be implemented directly?
		// Note: doesn't seem to be too obvious!?
		if (toVSOP = theory.toVSOP) {
			// translate via cartesian coords
			// there might be an easier way?
			// do we really need to convert?
			var orbit = new Orbit({
				a: elems[off+0],
				L: elems[off+1],
				k: elems[off+2],
				h: elems[off+3],
				q: elems[off+4],
				p: elems[off+5],
				GM: theory.GM,
				epoch: jy2k
			});
			// get state vectors
			var state = orbit.state(jy2k);
			// check for dynamic rotations
			if (typeof toVSOP == "function") {
				// create only once needed
				mat3 = mat3 || new THREE.Matrix3();
				// get dynamic matrix
				toVSOP(jy2k, mat3);
				toVSOP = mat3;
			}
			// rotate cartesian vectors
			state.r.applyMatrix3(toVSOP);
			state.v.applyMatrix3(toVSOP);
			// create via rotated state
			orbit = new Orbit(state);
			// update state elements
			elems[off++] = orbit._a;
			elems[off++] = orbit.L();
			elems[off++] = orbit.k();
			elems[off++] = orbit.h();
			elems[off++] = orbit.q();
			elems[off++] = orbit.p();
		}
		// return state object
		return elems;
	}
	// EO vsop

	// Return an orbital object suitable to create new Orbit
	function orbital(solver, theory, jy2k, elems, addGM, addEpoch, off)
	{
		off = off || 0;
		jy2k = jy2k || 0;
		elems = elems || [];
		// call main theory to fill elements
		vsop(solver, theory, jy2k, elems, addGM, addEpoch, off);
		// return orbital object
		return {
			a: elems[off++],
			L: elems[off++],
			k: elems[off++],
			h: elems[off++],
			q: elems[off++],
			p: elems[off++],
			GM: theory.GM,
			epoch: jy2k
		};
	}
	// EO orbital

	// update state elements in elems at offset and return array
	function state(solver, theory, jy2k, elems, addGM, addEpoch, off)
	{
		off = off || 0;
		jy2k = jy2k || 0;
		elems = elems || [];
		// call main theory to fill elements
		vsop(solver, theory, jy2k, elems, addGM, addEpoch, off);
		// create orbit object from vsop array
		var orbit = new Orbit({
			a: elems[off+0],
			L: elems[off+1],
			k: elems[off+2],
			h: elems[off+3],
			q: elems[off+4],
			p: elems[off+5],
			GM: theory.GM,
			epoch: jy2k
		});
		// calculate state vector
		var state = orbit.state(jy2k);
		// update state elements
		elems[off++] = state.r.x;
		elems[off++] = state.r.y;
		elems[off++] = state.r.z;
		elems[off++] = state.v.x;
		elems[off++] = state.v.y;
		elems[off++] = state.v.z;
		// return state object
		return elems;
	}
	// EO state

	// update state elements in elems at offset and return state object
	function position(solver, theory, jy2k, elems, addGM, addEpoch, off)
	{
		off = off || 0;
		jy2k = jy2k || 0;
		elems = elems || [];
		// call main theory to fill elements
		state(solver, theory, jy2k, elems, addGM, addEpoch, off);
		// return state object
		return {
			x: elems[off++],
			y: elems[off++],
			z: elems[off++],
			vx: elems[off++],
			vy: elems[off++],
			vz: elems[off++],
			GM: theory.GM,
			epoch: jy2k
		};
	}
	// EO position

	// Export the main exporter function
	// Call this function for every theory
	exports.VSOP = function VSOP(solver, name, GM, coeffs, toVSOP, givesMeanMotion)
	{
		var theory = {};
		// update raw elements in elems at offset and return elems array
		theory.raw = function vsop_raw(jy2k, elems, addGM, addEpoch, off) {
			return solver(theory, jy2k, elems, addGM, addEpoch, off);
		}
		// update vsop elements in elems at offset and return elems array
		theory.vsop = function vsop_theory(jy2k, elems, addGM, addEpoch, off) {
			return vsop(solver, theory, jy2k, elems, addGM, addEpoch, off);
		}
		// update state elements in elems at offset and return elems array
		theory.state = function vsop_state(jy2k, elems, addGM, addEpoch, off) {
			return state(solver, theory, jy2k, elems, addGM, addEpoch, off);
		}
		// update state elements in elems at offset and return state object
		theory.position = function vsop_position(jy2k, elems, addGM, addEpoch, off) {
			return position(solver, theory, jy2k, elems, addGM, addEpoch, off);
		}
		// update vsop elements in elems at offset and return orbital object
		theory.orbital = function vsop_orbital(jy2k, elems, addGM, addEpoch, off) {
			return orbital(solver, theory, jy2k, elems, addGM, addEpoch, off);
		}
		// update vsop elements in elems at offset and return orbit object
		theory.orbit = function vsop_orbit(jy2k, elems, addGM, addEpoch, off) {
			return new Orbit(orbital(solver, theory, jy2k, elems, addGM, addEpoch, off));
		}
		// Attach static properties
		theory.givesMeanMotion = givesMeanMotion;
		theory.toVSOP = toVSOP;
		theory.coeffs = coeffs;
		theory.GM = GM;
		// short name only
		theory.name = name;
		// Return theory
		return theory;
	}
	// EO exports.VSOP

})(this);;
//***********************************************************
// (c) 2016-2021 by Marcel Greter
// AstroJS TOP2010/13 utility lib
// https://github.com/mgreter/ephem.js
//***********************************************************
(function(exports) {

	// Re-use array
	var time = [];

	// generic top2010/2013 solver (pass coefficients and time)
	// time is julian years from j2000 (delta JD2451545.0 in JY)
	function top2k_theory(theory, jy2k, elems, addGM, addEpoch, off)
	{
		off = off || 0;
		jy2k = jy2k || 0;
		elems = elems || [];

		var jm2k = jy2k/1000;
		var dmu = theory.dmu;
		var freq = theory.freq;

		time[0] = 1.0;
		for (var i = 1; i <= 12; i += 1) {
			time[i] = time[i-1] * jm2k;
		}
		
		for (var iv = 0; iv < 6; iv += 1) {
			elems[off+iv] = 0;
			var coeffss = theory.coeffs[iv];
			for (var it = 0; it < coeffss.length; it += 1) {
				var coeffs = coeffss[it];
				for (var nt = 0; nt < coeffs.length; nt += 4) {
					var arg = coeffs[nt+0] * dmu * time[1];
					if (iv == 1 && it == 1 && coeffs[nt+0] == 0) continue;
					elems[off+iv] += time[it] * (coeffs[nt+1]*Math.cos(arg)+coeffs[nt+2]*Math.sin(arg))
				}
			}
		}
		
		var ipla = theory.ipla - 4;
		var xl=elems[off+1]+freq[ipla]*time[1];
		xl = xl % (Math.PI * 2);
		if (xl < 0) xl += Math.PI * 2;
		elems[off+1]=xl;
	
		off += 6;
		// update optional elements
		if (addGM) elems[off++] = theory.GM;
		if (addEpoch) elems[off++] = jy2k;
		// return array
		return elems;
	}
	// EO top2k_theory

	// Export the main export function
	// Call this function for each theory
	exports.TOP2K = function(name, GM, coeffs, ipla, freq)
	{
		// export generic VSOP theory with solver attached
		var theory = exports.VSOP(top2k_theory, name, GM, coeffs);
		theory.dmu = (freq[0]-freq[1])/880;
		theory.ipla = ipla;
		theory.freq = freq;
		return theory;
	}
	// EO exports.TOP2K

})(this);;
// generated by top2013.pl
var freq = [0.5296909622785881e+03, 0.2132990811942489e+03, 0.7478166163181234e+02, 0.3813297236217556e+02, 0.2533566020437000e+02];
top2013.jup = TOP2K('jup', 39.5146186826235, [[[0,0.520260320251589e1,0e0,0,1760,0.586644030389622e-3,0.364808880646653e-3,9.929435,287,-0.105511264989389e-3,-0.305044123711001e-3,60.891309],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,0.599544651972042e0,0e0,0,19,0.725433845217195e-3,-0.569011364035878e-2,919.779253,287,-0.599442495631391e-3,0.170403895455559e-3,60.891309],[0,0.529690962278588e3,0e0,0],[],[],[],[],[],[],[],[],[],[],[]],[[0,0.469858463615553e-1,0e0,0,287,0.271589555326587e-3,0.593820770691107e-3,60.891309,19,-0.170936289243544e-3,-0.339539891504608e-3,919.779253],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,0.120037085333047e-1,0e0,0,287,0.592321525822066e-3,-0.249925754750718e-3,60.891309,19,0.336250979092495e-3,-0.170410782760147e-3,919.779253],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,-0.20656227444973e-2,0e0,0,19,-0.434667341209352e-5,-0.738541333265967e-5,919.779253,306,-0.219852037896506e-5,-0.188973161699471e-6,57.110476],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,0.111838645264996e-1,0e0,0,19,0.773344928224678e-5,-0.35689920029361e-5,919.779253,306,0.499162758782671e-6,-0.212950498605238e-5,57.110476],[],[],[],[],[],[],[],[],[],[],[],[]]], 5 - 1, freq);
;
// generated by top2013.pl
var freq = [0.5296909622785881e+03, 0.2132990811942489e+03, 0.7478166163181234e+02, 0.3813297236217556e+02, 0.2533566020437000e+02];
top2013.sat = TOP2K('sat', 39.4882123322459, [[[0,0.955491043002684e1,0e0,0,880,0.323849548938038e-1,0.90833511534089e-2,19.85887,287,0.316316768111793e-2,0.160030814087327e-2,60.891309],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,0.874020950037982e0,0e0,0,19,-0.178566652495098e-2,0.140036173759203e-1,919.779253,880,-0.715348378312963e-3,0.249743034543058e-2,19.85887],[0,0.213299081194249e3,0e0,0],[],[],[],[],[],[],[],[],[],[],[]],[[0,-0.295989865304265e-2,0e0,0,1473,0.163239878614339e-2,-0.110761848261287e-2,11.864091,19,0.677965346409429e-3,0.139752681864814e-2,919.779253],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,0.55429660844523e-1,0e0,0,1473,0.111642352375446e-2,0.16217640108255e-2,11.864091,19,-0.138972523800651e-2,0.676321547467004e-3,919.779253],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,-0.871745581224837e-2,0e0,0,19,0.10238535767657e-4,0.178537700282835e-4,919.779253,880,0.674575140222428e-5,-0.275216351837503e-5,19.85887],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,0.198914361655962e-1,0e0,0,19,-0.184434292053419e-4,0.92450764886182e-5,919.779253,880,-0.644353156346286e-5,-0.545630659259749e-5,19.85887],[],[],[],[],[],[],[],[],[],[],[],[]]], 6 - 1, freq);
;
// generated by top2013.pl
var freq = [0.5296909622785881e+03, 0.2132990811942489e+03, 0.7478166163181234e+02, 0.3813297236217556e+02, 0.2533566020437000e+02];
top2013.ura = TOP2K('ura', 39.4786500913706, [[[0,0.192184382726331e2,0e0,0,1265,0.135321421305627e-1,-0.791569056236065e-1,13.814866,385,-0.217931380622157e-2,-0.205722009175391e-1,45.391703],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,0.548122186942516e1,0e0,0,4,-0.132351614204233e-1,0.698666639215793e-2,4368.95145,1265,0.336169071114254e-2,0.574788221698429e-3,13.814866],[0,0.747816616318123e2,0e0,0],[],[],[],[],[],[],[],[],[],[],[]],[[0,-0.459531056795268e-1,0e0,0,1473,0.22664379788647e-2,-0.154924834459392e-2,11.864091,4,-0.866266631080079e-3,-0.189715676691731e-2,4368.95145],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,0.564841580952597e-2,0e0,0,1473,0.154958122781575e-2,0.226794744239325e-2,11.864091,4,0.190511516720455e-2,-0.868008260060557e-3,4368.95145],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,0.185924040912689e-2,0e0,0,31,-0.482952528691316e-5,0.455879145453608e-5,563.735671,1265,0.411032214173787e-5,0.485672029953796e-5,13.814866],[],[],[],[],[],[],[],[],[]],[[0,0.64860176683173e-2,0e0,0,31,-0.475178396329155e-5,-0.451675474651478e-5,563.735671,1265,0.483286024566077e-5,-0.414867855480451e-5,13.814866],[],[],[],[],[],[],[],[],[]]], 7 - 1, freq);
;
// generated by top2013.pl
var freq = [0.5296909622785881e+03, 0.2132990811942489e+03, 0.7478166163181234e+02, 0.3813297236217556e+02, 0.2533566020437000e+02];
top2013.nep = TOP2K('nep', 39.4789600424755, [[[0,0.301104158723525e2,0e0,0,1367,-0.367856780689795e-4,-0.148182830545496e0,12.784057,487,-0.976035585958072e-2,-0.346297908194847e-1,35.884611],[1367,-0.10662161045025e-1,0.135390129109234e-4,12.784057],[],[],[],[],[],[],[],[],[],[],[]],[[0,0.531189904234912e1,0e0,0,4,0.898557276140093e-2,-0.474751063165365e-2,4368.95145,1367,0.441713228885103e-2,-0.857776151108783e-6,12.784057],[0,0.381329723621756e2,0e0,0],[],[],[],[],[],[],[],[],[],[],[]],[[0,0.599886117351009e-2,0e0,0,1473,0.283781749466851e-2,-0.194100749671137e-2,11.864091,106,0.768674093478471e-3,0.112470824456332e-2,164.866092],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,0.669170746895091e-2,0e0,0,1473,0.194150131622781e-2,0.284019844334074e-2,11.864091,106,-0.11251399251376e-2,0.768858238136258e-3,164.866092],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,-0.102914755515945e-1,0e0,0,1367,-0.413172612520542e-6,-0.100922706146012e-4,12.784057,1579,0.826647428111936e-5,0.284144206947083e-5,11.067641],[],[],[],[],[],[],[],[],[],[]],[[0,0.115167670357546e-1,0e0,0,1367,-0.100851627243517e-4,0.410806174707248e-6,12.784057,1579,-0.283923603668692e-5,0.826699750663497e-5,11.067641],[],[],[],[],[],[],[],[],[],[]]], 8 - 1, freq);
;
// generated by top2013.pl
var freq = [0.5296909622785881e+03, 0.2132990811942489e+03, 0.7478166163181234e+02, 0.3813297236217556e+02, 0.2533566020437000e+02];
top2013.plu = TOP2K('plu', 39.4769267244114, [[[0,0.3954461714403e2,0e0,0,1402,-0.188913735334341e0,-0.852581976354701e-1,12.464911,1331,-0.414958778338123e-1,-0.333874152748863e-1,13.129832,522,-0.485024749192498e-1,-0.734554122725473e-2,33.478555,71,0.281021329189482e-1,-0.534684376601521e-2,246.13811,1261,-0.91600251304609e-2,-0.123092045544314e-1,13.858688,452,-0.12202161344832e-1,-0.525198563299829e-2,38.663287],[1402,-0.24541007710854e-1,0.538225296756512e-1,12.464911,0,0.3789e-1,0e0,0,1331,-0.159817339293649e-1,0.196235717652556e-1,13.129832,522,-0.21667846285401e-2,0.138515233201363e-1,33.478555],[],[],[],[],[],[],[],[],[],[],[]],[[0,0.4165471124826e1,0e0,0,1402,0.206105169349723e-2,-0.456721639374337e-2,12.464911,4,0.349013706591797e-2,0.222149312802085e-2,4368.95145],[0,0.2533566020437e2,0e0,0],[0,-0.182722188391639e-1,0e0,0],[],[],[],[],[],[],[],[],[],[]],[[0,-0.1787389594035e0,0e0,0,1473,0.31629832749993e-2,-0.209858702949421e-2,11.864091,71,-0.681803576638604e-3,0.111135191639409e-2,246.13811],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,-0.1734047186423e0,0e0,0,1473,0.212348131150762e-2,0.30130058621335e-2,11.864091,71,-0.105054992003594e-2,-0.708496491526814e-3,246.13811],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,-0.5170230782278e-1,0e0,0,1402,-0.132967871573853e-3,0.135237840998234e-3,12.464911,1543,0.163008996403526e-3,0.559277554218394e-4,11.325862],[],[],[],[],[],[],[],[],[],[],[],[]],[[0,0.1397799251564e0,0e0,0,1402,0.128832005723724e-3,0.134711564336948e-3,12.464911,1543,-0.499793100988791e-4,0.161808960422928e-3,11.325862],[],[],[],[],[],[],[],[],[],[],[],[]]], 9 - 1, freq);
;
})(top2013)
/* crc: CDD1109E3D5A86B46E215C9A4C701581 */
